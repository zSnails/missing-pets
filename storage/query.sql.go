// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package storage

import (
	"context"
)

const createMissingPet = `-- name: CreateMissingPet :one
INSERT INTO
missing_pets (name, type, last_seen)
VALUES (?, ?, ?)
RETURNING id, name, type, last_seen
`

type CreateMissingPetParams struct {
	Name     string
	Type     string
	LastSeen string
}

func (q *Queries) CreateMissingPet(ctx context.Context, arg CreateMissingPetParams) (MissingPet, error) {
	row := q.db.QueryRowContext(ctx, createMissingPet, arg.Name, arg.Type, arg.LastSeen)
	var i MissingPet
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.LastSeen,
	)
	return i, err
}

const findMissingPetsByName = `-- name: FindMissingPetsByName :many
SELECT id, name, type, last_seen FROM
missing_pets
WHERE remove_special_characters(name)
LIKE remove_special_characters(CAST(?1 AS TEXT))
`

func (q *Queries) FindMissingPetsByName(ctx context.Context, name string) ([]MissingPet, error) {
	rows, err := q.db.QueryContext(ctx, findMissingPetsByName, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MissingPet
	for rows.Next() {
		var i MissingPet
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Type,
			&i.LastSeen,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const linkPetAndOwner = `-- name: LinkPetAndOwner :one
INSERT INTO
missing_pet_owner_rel (missing_pet_id, pet_owner_id)
VALUES (?, ?)
RETURNING id, missing_pet_id, pet_owner_id, "foreign"
`

type LinkPetAndOwnerParams struct {
	MissingPetID int64
	PetOwnerID   int64
}

func (q *Queries) LinkPetAndOwner(ctx context.Context, arg LinkPetAndOwnerParams) (MissingPetOwnerRel, error) {
	row := q.db.QueryRowContext(ctx, linkPetAndOwner, arg.MissingPetID, arg.PetOwnerID)
	var i MissingPetOwnerRel
	err := row.Scan(
		&i.ID,
		&i.MissingPetID,
		&i.PetOwnerID,
		&i.Foreign,
	)
	return i, err
}

const uploadPhoto = `-- name: UploadPhoto :one
INSERT INTO
missing_pet_photos (pet_id, encoded_data)
VALUES (?, ?)
RETURNING id
`

type UploadPhotoParams struct {
	PetID       int64
	EncodedData string
}

func (q *Queries) UploadPhoto(ctx context.Context, arg UploadPhotoParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, uploadPhoto, arg.PetID, arg.EncodedData)
	var id int64
	err := row.Scan(&id)
	return id, err
}
